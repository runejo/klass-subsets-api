name: $(Build.SourceBranch)-$(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
      - 'v2'
    exclude:
      - 'development'

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: Hemmeligheter
  - name: fullSha
    value: '$(Build.SourceVersion)'
  - name: imageHost
    value: 'https://eu.gcr.io/'
  - name: imageName
    value: 'eu.gcr.io/prod-bip/ssb/klass/subsets-api'
  - name: repoName
    value: 'prod-bip/ssb/klass/subsets-api'
  - name: imageTagBeforeVulnerabilityScan
    value: $(Build.SourceBranchName)-imagescan-$(fullSha)
  - name: imageTagAfterVulnerabilityScan
    value: $(Build.SourceBranchName)-$(fullSha)

jobs:
  - job: buildTestDockerBuildDockerPush
    displayName: 'Test/build app and Dockerimage'
    steps:
      - task: DownloadSecureFile@1
        name: dockerComposeCIBuild # use $(dockerComposeCIBuild.secureFilePath) to refer to it
        displayName: 'Download docker-compose.ci.build.yml'
        inputs:
          secureFile: 'docker-compose.ci.build.yml'
      - task: DownloadSecureFile@1
        name: sqlInit # use $(sqlInit.secureFilePath) to refer to it
        displayName: 'Download init-db-and-user.sql'
        inputs:
          secureFile: 'init-db-and-user.sql'
      - task: DownloadSecureFile@1
        name: schemaGraphQL # use $(schemaGraphQL.secureFilePath) to refer to it
        displayName: 'Download schema.graphql'
        inputs:
          secureFile: 'schema.graphql'
      - task: DockerCompose@0
        env:
          SQL_INIT_PATH: $(sqlInit.secureFilePath)
          SCHEMA_PATH: $(schemaGraphQL.secureFilePath)
        displayName: 'Run integration test backend services'
        inputs:
          action: Run services
          containerregistrytype: Container Registry
          dockerRegistryEndpoint: dockerHubOlved
          dockerComposeFile: $(dockerComposeCIBuild.secureFilePath)
          projectName: $(Build.Repository.Name)
          qualifyImageNames: true
          buildImages: false
          abortOnContainerExit: true
          detached: true
      - task: ShellScript@2
        inputs:
          scriptPath: sethost.sh
      - task: Maven@3
        env:
          API_LDS: "http://localhost:9090"
          API_KLASS: "https://data.ssb.no/api/klass"
        displayName: 'Maven install'
        inputs:
          mavenPomFile: 'pom.xml'
          mavenOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          testResultsFiles: '**/TEST-*.xml'
          goals: 'install'
          options: '-DskipTests=false -Dmaven.javadoc.skip=true'
      # Build Docker image
      - task: Docker@2
        displayName: 'Docker build'
        inputs:
          repository: $(imageName)
          command: 'build'
          Dockerfile: 'Dockerfile'
          tags: |
            $(imageTagBeforeVulnerabilityScan)
      - task: Docker@2
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        displayName: 'Login to GCR'
        inputs:
          command: login
          containerRegistry: gcrServiceConnection
      - task: Docker@2
        displayName: 'Docker push'
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          containerRegistry: gcrServiceConnection
          repository: $(repoName)
          command: 'push'
          Dockerfile: 'Dockerfile'
          tags: |
            $(imageTagBeforeVulnerabilityScan)
      - task: DownloadSecureFile@1
        name: gcrJsonKey
        displayName: 'Download gcr creds'
        inputs:
          secureFile: 'gcr-key.json'
      - script: |
          echo "Setting env variable GOOGLE_APPLICATION_CREDENTIALS"
          echo "##vso[task.setvariable variable=GOOGLE_APPLICATION_CREDENTIALS]$(gcrJsonKey.secureFilePath)"
        displayName: 'Setting GOOGLE_APPLICATION_CREDENTIALS env variable'
      - task: gcr-vulneralbility-check@0
        displayName: 'Image vulnerability check'
        inputs:
          projectId: 'prod-bip'
          imageHost: $(imageHost)
          image: $(repoName)
          imageTag: $(imageTagBeforeVulnerabilityScan)
          timeBetweenRetries: '10000'
      - script: |
          TAG=`git describe --tags`
          echo $TAG
          cat $(gcrJsonKey.secureFilePath) | docker login -u _json_key --password-stdin $(imageHost)
          docker pull $(imageName):$(imageTagBeforeVulnerabilityScan)
          docker tag $(imageName):$(imageTagBeforeVulnerabilityScan) $(imageName):$(imageTagAfterVulnerabilityScan)
          docker push $(imageName):$(imageTagAfterVulnerabilityScan)
        displayName: "Retagging docker image if successful vulnerability scan"
        condition: succeeded()